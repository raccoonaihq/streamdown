name: Deploy on Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-and-push:
    name: Build and Push to dist Branch
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install Dependencies
        run: pnpm i --frozen-lockfile

      - name: Run Tests
        run: pnpm --filter streamdown test

      - name: Build Package
        run: pnpm --filter streamdown build

      - name: Verify Build Output
        run: |
          if [ ! -d "packages/streamdown/dist" ]; then
            echo "Error: dist directory not found after build"
            exit 1
          fi
          if [ ! -f "packages/streamdown/dist/index.js" ]; then
            echo "Error: index.js not found in dist"
            exit 1
          fi
          if [ ! -f "packages/streamdown/dist/index.d.ts" ]; then
            echo "Error: index.d.ts not found in dist"
            exit 1
          fi
          if [ ! -f "packages/streamdown/dist/index.d.cts" ]; then
            echo "Error: index.d.cts not found in dist"
            exit 1
          fi

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Get Release Version
        id: version
        run: |
          # Get the tag name from the release
          VERSION="${{ github.event.release.tag_name }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "✓ Release version: $VERSION"

      - name: Create/Update dist Branch
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          COMMIT_SHA="${{ github.sha }}"

          # Create a clean temporary directory for the dist branch
          TEMP_DIR=$(mktemp -d)

          # Copy the built files (flatten the dist directory to root)
          cp -r packages/streamdown/dist/* "$TEMP_DIR/"

          # Copy package metadata
          cp packages/streamdown/README.md "$TEMP_DIR/"
          cp LICENSE "$TEMP_DIR/"

          # Create modified package.json with corrected paths for dist branch
          cat packages/streamdown/package.json | \
            sed 's|"./dist/|"./|g' | \
            sed 's|"dist",||g' > "$TEMP_DIR/package.json"

          # Create a minimal .gitignore for the dist branch
          cat > "$TEMP_DIR/.gitignore" << 'EOF'
          # Only ignore common system files in dist branch
          .DS_Store
          Thumbs.db
          EOF

          # Switch to dist branch (create if doesn't exist)
          git checkout --orphan dist-temp

          # Remove all files from the working directory
          git rm -rf . 2>/dev/null || true
          rm -rf ./*

          # Copy prepared files
          cp -r "$TEMP_DIR/"* .
          cp "$TEMP_DIR/.gitignore" .

          # Verify type files are present
          if [ ! -f "index.d.ts" ]; then
            echo "Error: index.d.ts not found in dist branch"
            exit 1
          fi
          if [ ! -f "index.d.cts" ]; then
            echo "Error: index.d.cts not found in dist branch"
            exit 1
          fi
          echo "✓ Type definitions verified in dist branch"

          # Add and commit
          git add -A
          git commit -m "Release $VERSION from ${COMMIT_SHA:0:7}"

          # Force push to dist branch
          git push origin dist-temp:dist --force

          # Cleanup
          rm -rf "$TEMP_DIR"

      - name: Create Version Tag on dist Branch
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Fetch the dist branch
          git fetch origin dist:dist

          # Get the latest commit SHA from dist branch
          DIST_SHA=$(git rev-parse dist)

          # Create tag on dist branch
          git tag $VERSION $DIST_SHA

          # Push the tag
          git push origin $VERSION

          echo "✓ Created tag $VERSION on dist branch"
